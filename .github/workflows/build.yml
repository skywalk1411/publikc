name: build app

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-13, ubuntu-latest]
        include:
          - os: windows-latest
            build_script: .\automate.ps1
            artifact: build/publikc-setup-win-x64-*.exe
            artifact_name: publikc-setup-win-x64.exe
          - os: macos-13
            build_script: ./automate.sh
            artifact: build/publikc-setup-mac-x64-*
            artifact_name: publikc-setup-mac-x64.dmg
          - os: ubuntu-latest
            build_script: ./automate.sh
            artifact: build/publikc-setup-linux-x64-*
            artifact_name: publikc-setup-linux-x64.AppImage

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Kill node processes (Windows only)
        if: runner.os == 'Windows'
        run: |
          taskkill /F /IM node.exe -ErrorAction SilentlyContinue

      - name: Clean node_modules
        run: npx rimraf node_modules

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Get version from package.json
        id: pkg
        run: |
          echo "version=$(node -p 'require(\"./package.json\").version')" >> $GITHUB_OUTPUT

      - name: Create draft release
        uses: softprops/action-gh-release@v2.0.6
        with:
          tag_name: v${{ steps.pkg.outputs.version }}
          name: Release ${{ steps.pkg.outputs.version }}
          draft: true

      - name: Build (Windows)
        if: matrix.os == 'windows-latest'
        run: ${{ matrix.build_script }}
        shell: pwsh

      - name: Build (Unix)
        if: matrix.os != 'windows-latest'
        run: ${{ matrix.build_script }}
        shell: bash

      - name: List build directory
        run: ls -l build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: publikc-${{ steps.pkg.outputs.version }}-${{ matrix.artifact_name }}
          path: ${{ matrix.artifact }}
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false
